// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::status_charges::StatusCharges;
#[allow(unused)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TableUnit {
    pub name: String,
    pub hp: i32,
    pub pwr: i32,
    pub houses: String,
    pub stacks: i32,
    pub level: i32,
    pub statuses: Vec<StatusCharges>,
    pub trigger: String,
    pub representation: String,
    pub state: String,
}

impl TableType for TableUnit {
    const TABLE_NAME: &'static str = "TableUnit";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for TableUnit {
    type PrimaryKey = String;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.name
    }
}

impl TableUnit {
    #[allow(unused)]
    pub fn filter_by_name(name: String) -> Option<Self> {
        Self::find(|row| row.name == name)
    }
    #[allow(unused)]
    pub fn filter_by_hp(hp: i32) -> TableIter<Self> {
        Self::filter(|row| row.hp == hp)
    }
    #[allow(unused)]
    pub fn filter_by_pwr(pwr: i32) -> TableIter<Self> {
        Self::filter(|row| row.pwr == pwr)
    }
    #[allow(unused)]
    pub fn filter_by_houses(houses: String) -> TableIter<Self> {
        Self::filter(|row| row.houses == houses)
    }
    #[allow(unused)]
    pub fn filter_by_stacks(stacks: i32) -> TableIter<Self> {
        Self::filter(|row| row.stacks == stacks)
    }
    #[allow(unused)]
    pub fn filter_by_level(level: i32) -> TableIter<Self> {
        Self::filter(|row| row.level == level)
    }
    #[allow(unused)]
    pub fn filter_by_statuses(statuses: Vec<StatusCharges>) -> TableIter<Self> {
        Self::filter(|row| row.statuses == statuses)
    }
    #[allow(unused)]
    pub fn filter_by_trigger(trigger: String) -> TableIter<Self> {
        Self::filter(|row| row.trigger == trigger)
    }
    #[allow(unused)]
    pub fn filter_by_representation(representation: String) -> TableIter<Self> {
        Self::filter(|row| row.representation == representation)
    }
    #[allow(unused)]
    pub fn filter_by_state(state: String) -> TableIter<Self> {
        Self::filter(|row| row.state == state)
    }
}
