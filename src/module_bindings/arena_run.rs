// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::game_state::GameState;
#[allow(unused)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ArenaRun {
    pub id: u64,
    pub user_id: u64,
    pub wins: u8,
    pub loses: u8,
    pub enemies: Vec<u64>,
    pub state: GameState,
    pub active: bool,
    pub last_updated: u64,
}

impl TableType for ArenaRun {
    const TABLE_NAME: &'static str = "ArenaRun";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for ArenaRun {
    type PrimaryKey = u64;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.id
    }
}

impl ArenaRun {
    #[allow(unused)]
    pub fn filter_by_id(id: u64) -> Option<Self> {
        Self::find(|row| row.id == id)
    }
    #[allow(unused)]
    pub fn filter_by_user_id(user_id: u64) -> TableIter<Self> {
        Self::filter(|row| row.user_id == user_id)
    }
    #[allow(unused)]
    pub fn filter_by_wins(wins: u8) -> TableIter<Self> {
        Self::filter(|row| row.wins == wins)
    }
    #[allow(unused)]
    pub fn filter_by_loses(loses: u8) -> TableIter<Self> {
        Self::filter(|row| row.loses == loses)
    }
    #[allow(unused)]
    pub fn filter_by_enemies(enemies: Vec<u64>) -> TableIter<Self> {
        Self::filter(|row| row.enemies == enemies)
    }
    #[allow(unused)]
    pub fn filter_by_state(state: GameState) -> TableIter<Self> {
        Self::filter(|row| row.state == state)
    }
    #[allow(unused)]
    pub fn filter_by_active(active: bool) -> TableIter<Self> {
        Self::filter(|row| row.active == active)
    }
    #[allow(unused)]
    pub fn filter_by_last_updated(last_updated: u64) -> TableIter<Self> {
        Self::filter(|row| row.last_updated == last_updated)
    }
}
