// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::t_base_unit_type::TBaseUnit;
use super::unit_pool_type::UnitPool;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

/// Table handle for the table `base_unit`.
///
/// Obtain a handle from the [`BaseUnitTableAccess::base_unit`] method on [`super::RemoteTables`],
/// like `ctx.db.base_unit()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.base_unit().on_insert(...)`.
pub struct BaseUnitTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<TBaseUnit>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `base_unit`.
///
/// Implemented for [`super::RemoteTables`].
pub trait BaseUnitTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`BaseUnitTableHandle`], which mediates access to the table `base_unit`.
    fn base_unit(&self) -> BaseUnitTableHandle<'_>;
}

impl BaseUnitTableAccess for super::RemoteTables {
    fn base_unit(&self) -> BaseUnitTableHandle<'_> {
        BaseUnitTableHandle {
            imp: self.imp.get_table::<TBaseUnit>("base_unit"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct BaseUnitInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct BaseUnitDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for BaseUnitTableHandle<'ctx> {
    type Row = TBaseUnit;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = TBaseUnit> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = BaseUnitInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> BaseUnitInsertCallbackId {
        BaseUnitInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: BaseUnitInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = BaseUnitDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> BaseUnitDeleteCallbackId {
        BaseUnitDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: BaseUnitDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub struct BaseUnitUpdateCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::TableWithPrimaryKey for BaseUnitTableHandle<'ctx> {
    type UpdateCallbackId = BaseUnitUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> BaseUnitUpdateCallbackId {
        BaseUnitUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: BaseUnitUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<TBaseUnit>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_with_primary_key::<String>(
        raw_updates,
        |row: &TBaseUnit| &row.name,
    )
    .context("Failed to parse table update for table \"base_unit\"")
}

/// Access to the `name` unique index on the table `base_unit`,
/// which allows point queries on the field of the same name
/// via the [`BaseUnitNameUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.base_unit().name().find(...)`.
pub struct BaseUnitNameUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<TBaseUnit, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> BaseUnitTableHandle<'ctx> {
    /// Get a handle on the `name` unique index on the table `base_unit`.
    pub fn name(&self) -> BaseUnitNameUnique<'ctx> {
        BaseUnitNameUnique {
            imp: self
                .imp
                .get_unique_constraint::<String>("name", |row| &row.name),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> BaseUnitNameUnique<'ctx> {
    /// Find the subscribed row whose `name` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<TBaseUnit> {
        self.imp.find(col_val)
    }
}
