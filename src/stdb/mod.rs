// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::__codegen::{
    self as __sdk, __lib, __sats, __ws,
    anyhow::{self as __anyhow, Context as _},
};

pub mod admin_daily_update_reducer;
pub mod admin_give_tag_reducer;
pub mod admin_set_temp_pass_reducer;
pub mod battle_insert_reducer;
pub mod battle_table;
pub mod cleanup_reducer;
pub mod daily_update_reducer_reducer;
pub mod daily_update_timer_table;
pub mod daily_update_timer_type;
pub mod give_credits_reducer;
pub mod global_data_table;
pub mod global_data_type;
pub mod global_settings_table;
pub mod global_settings_type;
pub mod identity_disconnected_reducer;
pub mod init_reducer;
pub mod login_by_identity_reducer;
pub mod login_reducer;
pub mod logout_reducer;
pub mod node_move_reducer;
pub mod node_spawn_hero_reducer;
pub mod node_spawn_reducer;
pub mod nodes_relations_table;
pub mod nodes_table;
pub mod player_table;
pub mod player_tag_table;
pub mod register_empty_reducer;
pub mod register_reducer;
pub mod set_name_reducer;
pub mod set_password_reducer;
pub mod sync_assets_reducer;
pub mod t_battle_type;
pub mod t_node_relation_type;
pub mod t_node_type;
pub mod t_player_tag_type;
pub mod t_player_type;
pub mod t_wallet_type;
pub mod wallet_table;

pub use admin_daily_update_reducer::{
    admin_daily_update, set_flags_for_admin_daily_update, AdminDailyUpdateCallbackId,
};
pub use admin_give_tag_reducer::{
    admin_give_tag, set_flags_for_admin_give_tag, AdminGiveTagCallbackId,
};
pub use admin_set_temp_pass_reducer::{
    admin_set_temp_pass, set_flags_for_admin_set_temp_pass, AdminSetTempPassCallbackId,
};
pub use battle_insert_reducer::{
    battle_insert, set_flags_for_battle_insert, BattleInsertCallbackId,
};
pub use battle_table::*;
pub use cleanup_reducer::{cleanup, set_flags_for_cleanup, CleanupCallbackId};
pub use daily_update_reducer_reducer::{
    daily_update_reducer, set_flags_for_daily_update_reducer, DailyUpdateReducerCallbackId,
};
pub use daily_update_timer_table::*;
pub use daily_update_timer_type::DailyUpdateTimer;
pub use give_credits_reducer::{give_credits, set_flags_for_give_credits, GiveCreditsCallbackId};
pub use global_data_table::*;
pub use global_data_type::GlobalData;
pub use global_settings_table::*;
pub use global_settings_type::GlobalSettings;
pub use identity_disconnected_reducer::{
    identity_disconnected, set_flags_for_identity_disconnected, IdentityDisconnectedCallbackId,
};
pub use init_reducer::{init, set_flags_for_init, InitCallbackId};
pub use login_by_identity_reducer::{
    login_by_identity, set_flags_for_login_by_identity, LoginByIdentityCallbackId,
};
pub use login_reducer::{login, set_flags_for_login, LoginCallbackId};
pub use logout_reducer::{logout, set_flags_for_logout, LogoutCallbackId};
pub use node_move_reducer::{node_move, set_flags_for_node_move, NodeMoveCallbackId};
pub use node_spawn_hero_reducer::{
    node_spawn_hero, set_flags_for_node_spawn_hero, NodeSpawnHeroCallbackId,
};
pub use node_spawn_reducer::{node_spawn, set_flags_for_node_spawn, NodeSpawnCallbackId};
pub use nodes_relations_table::*;
pub use nodes_table::*;
pub use player_table::*;
pub use player_tag_table::*;
pub use register_empty_reducer::{
    register_empty, set_flags_for_register_empty, RegisterEmptyCallbackId,
};
pub use register_reducer::{register, set_flags_for_register, RegisterCallbackId};
pub use set_name_reducer::{set_flags_for_set_name, set_name, SetNameCallbackId};
pub use set_password_reducer::{set_flags_for_set_password, set_password, SetPasswordCallbackId};
pub use sync_assets_reducer::{set_flags_for_sync_assets, sync_assets, SyncAssetsCallbackId};
pub use t_battle_type::TBattle;
pub use t_node_relation_type::TNodeRelation;
pub use t_node_type::TNode;
pub use t_player_tag_type::TPlayerTag;
pub use t_player_type::TPlayer;
pub use t_wallet_type::TWallet;
pub use wallet_table::*;

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    IdentityDisconnected,
    Init,
    AdminDailyUpdate,
    AdminGiveTag {
        owner: u64,
        tag: String,
    },
    AdminSetTempPass {
        id: u64,
    },
    BattleInsert {
        team_left: Vec<String>,
        team_right: Vec<String>,
    },
    Cleanup,
    DailyUpdateReducer {
        timer: DailyUpdateTimer,
    },
    GiveCredits,
    Login {
        name: String,
        pass: String,
    },
    LoginByIdentity,
    Logout,
    NodeMove {
        id: u64,
        x: f32,
        y: f32,
    },
    NodeSpawn {
        id: Option<u64>,
        kinds: Vec<String>,
        datas: Vec<String>,
    },
    NodeSpawnHero {
        name: String,
    },
    Register {
        name: String,
        pass: String,
    },
    RegisterEmpty,
    SetName {
        name: String,
    },
    SetPassword {
        old_pass: String,
        new_pass: String,
    },
    SyncAssets {
        global_settings: GlobalSettings,
    },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::IdentityDisconnected => "__identity_disconnected__",
            Reducer::Init => "__init__",
            Reducer::AdminDailyUpdate => "admin_daily_update",
            Reducer::AdminGiveTag { .. } => "admin_give_tag",
            Reducer::AdminSetTempPass { .. } => "admin_set_temp_pass",
            Reducer::BattleInsert { .. } => "battle_insert",
            Reducer::Cleanup => "cleanup",
            Reducer::DailyUpdateReducer { .. } => "daily_update_reducer",
            Reducer::GiveCredits => "give_credits",
            Reducer::Login { .. } => "login",
            Reducer::LoginByIdentity => "login_by_identity",
            Reducer::Logout => "logout",
            Reducer::NodeMove { .. } => "node_move",
            Reducer::NodeSpawn { .. } => "node_spawn",
            Reducer::NodeSpawnHero { .. } => "node_spawn_hero",
            Reducer::Register { .. } => "register",
            Reducer::RegisterEmpty => "register_empty",
            Reducer::SetName { .. } => "set_name",
            Reducer::SetPassword { .. } => "set_password",
            Reducer::SyncAssets { .. } => "sync_assets",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __anyhow::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __anyhow::Result<Self> {
        match &value.reducer_name[..] {
            "__identity_disconnected__" => {
                Ok(__sdk::parse_reducer_args::<
                    identity_disconnected_reducer::IdentityDisconnectedArgs,
                >("__identity_disconnected__", &value.args)?
                .into())
            }
            "__init__" => Ok(__sdk::parse_reducer_args::<init_reducer::InitArgs>(
                "__init__",
                &value.args,
            )?
            .into()),
            "admin_daily_update" => Ok(__sdk::parse_reducer_args::<
                admin_daily_update_reducer::AdminDailyUpdateArgs,
            >("admin_daily_update", &value.args)?
            .into()),
            "admin_give_tag" => Ok(__sdk::parse_reducer_args::<
                admin_give_tag_reducer::AdminGiveTagArgs,
            >("admin_give_tag", &value.args)?
            .into()),
            "admin_set_temp_pass" => Ok(__sdk::parse_reducer_args::<
                admin_set_temp_pass_reducer::AdminSetTempPassArgs,
            >("admin_set_temp_pass", &value.args)?
            .into()),
            "battle_insert" => Ok(__sdk::parse_reducer_args::<
                battle_insert_reducer::BattleInsertArgs,
            >("battle_insert", &value.args)?
            .into()),
            "cleanup" => Ok(__sdk::parse_reducer_args::<cleanup_reducer::CleanupArgs>(
                "cleanup",
                &value.args,
            )?
            .into()),
            "daily_update_reducer" => Ok(__sdk::parse_reducer_args::<
                daily_update_reducer_reducer::DailyUpdateReducerArgs,
            >("daily_update_reducer", &value.args)?
            .into()),
            "give_credits" => Ok(
                __sdk::parse_reducer_args::<give_credits_reducer::GiveCreditsArgs>(
                    "give_credits",
                    &value.args,
                )?
                .into(),
            ),
            "login" => Ok(__sdk::parse_reducer_args::<login_reducer::LoginArgs>(
                "login",
                &value.args,
            )?
            .into()),
            "login_by_identity" => Ok(__sdk::parse_reducer_args::<
                login_by_identity_reducer::LoginByIdentityArgs,
            >("login_by_identity", &value.args)?
            .into()),
            "logout" => Ok(__sdk::parse_reducer_args::<logout_reducer::LogoutArgs>(
                "logout",
                &value.args,
            )?
            .into()),
            "node_move" => Ok(
                __sdk::parse_reducer_args::<node_move_reducer::NodeMoveArgs>(
                    "node_move",
                    &value.args,
                )?
                .into(),
            ),
            "node_spawn" => Ok(
                __sdk::parse_reducer_args::<node_spawn_reducer::NodeSpawnArgs>(
                    "node_spawn",
                    &value.args,
                )?
                .into(),
            ),
            "node_spawn_hero" => Ok(__sdk::parse_reducer_args::<
                node_spawn_hero_reducer::NodeSpawnHeroArgs,
            >("node_spawn_hero", &value.args)?
            .into()),
            "register" => Ok(__sdk::parse_reducer_args::<register_reducer::RegisterArgs>(
                "register",
                &value.args,
            )?
            .into()),
            "register_empty" => Ok(__sdk::parse_reducer_args::<
                register_empty_reducer::RegisterEmptyArgs,
            >("register_empty", &value.args)?
            .into()),
            "set_name" => Ok(__sdk::parse_reducer_args::<set_name_reducer::SetNameArgs>(
                "set_name",
                &value.args,
            )?
            .into()),
            "set_password" => Ok(
                __sdk::parse_reducer_args::<set_password_reducer::SetPasswordArgs>(
                    "set_password",
                    &value.args,
                )?
                .into(),
            ),
            "sync_assets" => Ok(
                __sdk::parse_reducer_args::<sync_assets_reducer::SyncAssetsArgs>(
                    "sync_assets",
                    &value.args,
                )?
                .into(),
            ),
            _ => Err(__anyhow::anyhow!(
                "Unknown reducer {:?}",
                value.reducer_name
            )),
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    battle: __sdk::TableUpdate<TBattle>,
    daily_update_timer: __sdk::TableUpdate<DailyUpdateTimer>,
    global_data: __sdk::TableUpdate<GlobalData>,
    global_settings: __sdk::TableUpdate<GlobalSettings>,
    nodes: __sdk::TableUpdate<TNode>,
    nodes_relations: __sdk::TableUpdate<TNodeRelation>,
    player: __sdk::TableUpdate<TPlayer>,
    player_tag: __sdk::TableUpdate<TPlayerTag>,
    wallet: __sdk::TableUpdate<TWallet>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __anyhow::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "battle" => db_update.battle = battle_table::parse_table_update(table_update)?,
                "daily_update_timer" => {
                    db_update.daily_update_timer =
                        daily_update_timer_table::parse_table_update(table_update)?
                }
                "global_data" => {
                    db_update.global_data = global_data_table::parse_table_update(table_update)?
                }
                "global_settings" => {
                    db_update.global_settings =
                        global_settings_table::parse_table_update(table_update)?
                }
                "nodes" => db_update.nodes = nodes_table::parse_table_update(table_update)?,
                "nodes_relations" => {
                    db_update.nodes_relations =
                        nodes_relations_table::parse_table_update(table_update)?
                }
                "player" => db_update.player = player_table::parse_table_update(table_update)?,
                "player_tag" => {
                    db_update.player_tag = player_tag_table::parse_table_update(table_update)?
                }
                "wallet" => db_update.wallet = wallet_table::parse_table_update(table_update)?,

                unknown => __anyhow::bail!("Unknown table {unknown:?} in DatabaseUpdate"),
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(&self, cache: &mut __sdk::ClientCache<RemoteModule>) {
        cache.apply_diff_to_table::<TBattle>("battle", &self.battle);
        cache.apply_diff_to_table::<DailyUpdateTimer>(
            "daily_update_timer",
            &self.daily_update_timer,
        );
        cache.apply_diff_to_table::<GlobalData>("global_data", &self.global_data);
        cache.apply_diff_to_table::<GlobalSettings>("global_settings", &self.global_settings);
        cache.apply_diff_to_table::<TNode>("nodes", &self.nodes);
        cache.apply_diff_to_table::<TNodeRelation>("nodes_relations", &self.nodes_relations);
        cache.apply_diff_to_table::<TPlayer>("player", &self.player);
        cache.apply_diff_to_table::<TPlayerTag>("player_tag", &self.player_tag);
        cache.apply_diff_to_table::<TWallet>("wallet", &self.wallet);
    }
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<TBattle>("battle", &self.battle, event);
        callbacks.invoke_table_row_callbacks::<DailyUpdateTimer>(
            "daily_update_timer",
            &self.daily_update_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GlobalData>("global_data", &self.global_data, event);
        callbacks.invoke_table_row_callbacks::<GlobalSettings>(
            "global_settings",
            &self.global_settings,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TNode>("nodes", &self.nodes, event);
        callbacks.invoke_table_row_callbacks::<TNodeRelation>(
            "nodes_relations",
            &self.nodes_relations,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TPlayer>("player", &self.player, event);
        callbacks.invoke_table_row_callbacks::<TPlayerTag>("player_tag", &self.player_tag, event);
        callbacks.invoke_table_row_callbacks::<TWallet>("wallet", &self.wallet, event);
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __anyhow::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn address(&self) -> __sdk::Address {
        self.imp.address()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __anyhow::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __anyhow::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __anyhow::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __anyhow::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __anyhow::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A [`DbConnection`] augmented with an [`__sdk::Event`],
/// passed to various callbacks invoked by the SDK.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __anyhow::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn address(&self) -> __sdk::Address {
        self.imp.address()
    }
}

impl __sdk::EventContext for EventContext {
    fn event(&self) -> &__sdk::Event<Reducer> {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: __sdk::Event<Reducer>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        battle_table::register_table(client_cache);
        daily_update_timer_table::register_table(client_cache);
        global_data_table::register_table(client_cache);
        global_settings_table::register_table(client_cache);
        nodes_table::register_table(client_cache);
        nodes_relations_table::register_table(client_cache);
        player_table::register_table(client_cache);
        player_tag_table::register_table(client_cache);
        wallet_table::register_table(client_cache);
    }
}
