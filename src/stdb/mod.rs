// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

pub mod admin_daily_update_reducer;
pub mod admin_give_tag_reducer;
pub mod admin_set_temp_pass_reducer;
pub mod arena_leaderboard_table;
pub mod arena_pool_table;
pub mod arena_settings_type;
pub mod battle_settings_type;
pub mod cleanup_reducer;
pub mod daily_state_table;
pub mod daily_update_reducer_reducer;
pub mod daily_update_timer_table;
pub mod daily_update_timer_type;
pub mod game_mode_type;
pub mod give_credits_reducer;
pub mod global_data_table;
pub mod global_data_type;
pub mod global_settings_table;
pub mod global_settings_type;
pub mod identity_disconnected_reducer;
pub mod inflating_int_type;
pub mod init_reducer;
pub mod login_by_identity_reducer;
pub mod login_reducer;
pub mod logout_reducer;
pub mod meta_settings_type;
pub mod player_game_stats_table;
pub mod player_stats_table;
pub mod player_table;
pub mod player_tag_table;
pub mod quest_accept_reducer;
pub mod quest_finish_reducer;
pub mod quest_settings_type;
pub mod quest_table;
pub mod quest_variant_type;
pub mod rarity_settings_type;
pub mod register_empty_reducer;
pub mod register_reducer;
pub mod set_name_reducer;
pub mod set_password_reducer;
pub mod t_arena_leaderboard_type;
pub mod t_arena_pool_type;
pub mod t_daily_state_type;
pub mod t_player_game_stats_type;
pub mod t_player_stats_type;
pub mod t_player_tag_type;
pub mod t_player_type;
pub mod t_quest_type;
pub mod t_wallet_type;
pub mod wallet_table;

pub use admin_daily_update_reducer::*;
pub use admin_give_tag_reducer::*;
pub use admin_set_temp_pass_reducer::*;
pub use arena_leaderboard_table::*;
pub use arena_pool_table::*;
pub use arena_settings_type::*;
pub use battle_settings_type::*;
pub use cleanup_reducer::*;
pub use daily_state_table::*;
pub use daily_update_reducer_reducer::*;
pub use daily_update_timer_table::*;
pub use daily_update_timer_type::*;
pub use game_mode_type::*;
pub use give_credits_reducer::*;
pub use global_data_table::*;
pub use global_data_type::*;
pub use global_settings_table::*;
pub use global_settings_type::*;
pub use identity_disconnected_reducer::*;
pub use inflating_int_type::*;
pub use init_reducer::*;
pub use login_by_identity_reducer::*;
pub use login_reducer::*;
pub use logout_reducer::*;
pub use meta_settings_type::*;
pub use player_game_stats_table::*;
pub use player_stats_table::*;
pub use player_table::*;
pub use player_tag_table::*;
pub use quest_accept_reducer::*;
pub use quest_finish_reducer::*;
pub use quest_settings_type::*;
pub use quest_table::*;
pub use quest_variant_type::*;
pub use rarity_settings_type::*;
pub use register_empty_reducer::*;
pub use register_reducer::*;
pub use set_name_reducer::*;
pub use set_password_reducer::*;
pub use t_arena_leaderboard_type::*;
pub use t_arena_pool_type::*;
pub use t_daily_state_type::*;
pub use t_player_game_stats_type::*;
pub use t_player_stats_type::*;
pub use t_player_tag_type::*;
pub use t_player_type::*;
pub use t_quest_type::*;
pub use t_wallet_type::*;
pub use wallet_table::*;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    IdentityDisconnected(identity_disconnected_reducer::IdentityDisconnected),
    Init(init_reducer::Init),
    AdminDailyUpdate(admin_daily_update_reducer::AdminDailyUpdate),
    AdminGiveTag(admin_give_tag_reducer::AdminGiveTag),
    AdminSetTempPass(admin_set_temp_pass_reducer::AdminSetTempPass),
    Cleanup(cleanup_reducer::Cleanup),
    DailyUpdateReducer(daily_update_reducer_reducer::DailyUpdateReducer),
    GiveCredits(give_credits_reducer::GiveCredits),
    Login(login_reducer::Login),
    LoginByIdentity(login_by_identity_reducer::LoginByIdentity),
    Logout(logout_reducer::Logout),
    QuestAccept(quest_accept_reducer::QuestAccept),
    QuestFinish(quest_finish_reducer::QuestFinish),
    Register(register_reducer::Register),
    RegisterEmpty(register_empty_reducer::RegisterEmpty),
    SetName(set_name_reducer::SetName),
    SetPassword(set_password_reducer::SetPassword),
}

impl __sdk::spacetime_module::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::spacetime_module::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::IdentityDisconnected(_) => "__identity_disconnected__",
            Reducer::Init(_) => "__init__",
            Reducer::AdminDailyUpdate(_) => "admin_daily_update",
            Reducer::AdminGiveTag(_) => "admin_give_tag",
            Reducer::AdminSetTempPass(_) => "admin_set_temp_pass",
            Reducer::Cleanup(_) => "cleanup",
            Reducer::DailyUpdateReducer(_) => "daily_update_reducer",
            Reducer::GiveCredits(_) => "give_credits",
            Reducer::Login(_) => "login",
            Reducer::LoginByIdentity(_) => "login_by_identity",
            Reducer::Logout(_) => "logout",
            Reducer::QuestAccept(_) => "quest_accept",
            Reducer::QuestFinish(_) => "quest_finish",
            Reducer::Register(_) => "register",
            Reducer::RegisterEmpty(_) => "register_empty",
            Reducer::SetName(_) => "set_name",
            Reducer::SetPassword(_) => "set_password",
        }
    }
    fn reducer_args(&self) -> &dyn std::any::Any {
        match self {
            Reducer::IdentityDisconnected(args) => args,
            Reducer::Init(args) => args,
            Reducer::AdminDailyUpdate(args) => args,
            Reducer::AdminGiveTag(args) => args,
            Reducer::AdminSetTempPass(args) => args,
            Reducer::Cleanup(args) => args,
            Reducer::DailyUpdateReducer(args) => args,
            Reducer::GiveCredits(args) => args,
            Reducer::Login(args) => args,
            Reducer::LoginByIdentity(args) => args,
            Reducer::Logout(args) => args,
            Reducer::QuestAccept(args) => args,
            Reducer::QuestFinish(args) => args,
            Reducer::Register(args) => args,
            Reducer::RegisterEmpty(args) => args,
            Reducer::SetName(args) => args,
            Reducer::SetPassword(args) => args,
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __anyhow::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __anyhow::Result<Self> {
        match &value.reducer_name[..] {
            "__identity_disconnected__" => Ok(Reducer::IdentityDisconnected(
                __sdk::spacetime_module::parse_reducer_args(
                    "__identity_disconnected__",
                    &value.args,
                )?,
            )),
            "__init__" => Ok(Reducer::Init(__sdk::spacetime_module::parse_reducer_args(
                "__init__",
                &value.args,
            )?)),
            "admin_daily_update" => Ok(Reducer::AdminDailyUpdate(
                __sdk::spacetime_module::parse_reducer_args("admin_daily_update", &value.args)?,
            )),
            "admin_give_tag" => Ok(Reducer::AdminGiveTag(
                __sdk::spacetime_module::parse_reducer_args("admin_give_tag", &value.args)?,
            )),
            "admin_set_temp_pass" => Ok(Reducer::AdminSetTempPass(
                __sdk::spacetime_module::parse_reducer_args("admin_set_temp_pass", &value.args)?,
            )),
            "cleanup" => Ok(Reducer::Cleanup(
                __sdk::spacetime_module::parse_reducer_args("cleanup", &value.args)?,
            )),
            "daily_update_reducer" => Ok(Reducer::DailyUpdateReducer(
                __sdk::spacetime_module::parse_reducer_args("daily_update_reducer", &value.args)?,
            )),
            "give_credits" => Ok(Reducer::GiveCredits(
                __sdk::spacetime_module::parse_reducer_args("give_credits", &value.args)?,
            )),
            "login" => Ok(Reducer::Login(__sdk::spacetime_module::parse_reducer_args(
                "login",
                &value.args,
            )?)),
            "login_by_identity" => Ok(Reducer::LoginByIdentity(
                __sdk::spacetime_module::parse_reducer_args("login_by_identity", &value.args)?,
            )),
            "logout" => Ok(Reducer::Logout(
                __sdk::spacetime_module::parse_reducer_args("logout", &value.args)?,
            )),
            "quest_accept" => Ok(Reducer::QuestAccept(
                __sdk::spacetime_module::parse_reducer_args("quest_accept", &value.args)?,
            )),
            "quest_finish" => Ok(Reducer::QuestFinish(
                __sdk::spacetime_module::parse_reducer_args("quest_finish", &value.args)?,
            )),
            "register" => Ok(Reducer::Register(
                __sdk::spacetime_module::parse_reducer_args("register", &value.args)?,
            )),
            "register_empty" => Ok(Reducer::RegisterEmpty(
                __sdk::spacetime_module::parse_reducer_args("register_empty", &value.args)?,
            )),
            "set_name" => Ok(Reducer::SetName(
                __sdk::spacetime_module::parse_reducer_args("set_name", &value.args)?,
            )),
            "set_password" => Ok(Reducer::SetPassword(
                __sdk::spacetime_module::parse_reducer_args("set_password", &value.args)?,
            )),
            _ => Err(__anyhow::anyhow!(
                "Unknown reducer {:?}",
                value.reducer_name
            )),
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    arena_leaderboard: __sdk::spacetime_module::TableUpdate<TArenaLeaderboard>,
    arena_pool: __sdk::spacetime_module::TableUpdate<TArenaPool>,
    daily_state: __sdk::spacetime_module::TableUpdate<TDailyState>,
    daily_update_timer: __sdk::spacetime_module::TableUpdate<DailyUpdateTimer>,
    global_data: __sdk::spacetime_module::TableUpdate<GlobalData>,
    global_settings: __sdk::spacetime_module::TableUpdate<GlobalSettings>,
    player: __sdk::spacetime_module::TableUpdate<TPlayer>,
    player_game_stats: __sdk::spacetime_module::TableUpdate<TPlayerGameStats>,
    player_stats: __sdk::spacetime_module::TableUpdate<TPlayerStats>,
    player_tag: __sdk::spacetime_module::TableUpdate<TPlayerTag>,
    quest: __sdk::spacetime_module::TableUpdate<TQuest>,
    wallet: __sdk::spacetime_module::TableUpdate<TWallet>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __anyhow::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "arena_leaderboard" => {
                    db_update.arena_leaderboard =
                        arena_leaderboard_table::parse_table_update(table_update)?
                }
                "arena_pool" => {
                    db_update.arena_pool = arena_pool_table::parse_table_update(table_update)?
                }
                "daily_state" => {
                    db_update.daily_state = daily_state_table::parse_table_update(table_update)?
                }
                "daily_update_timer" => {
                    db_update.daily_update_timer =
                        daily_update_timer_table::parse_table_update(table_update)?
                }
                "global_data" => {
                    db_update.global_data = global_data_table::parse_table_update(table_update)?
                }
                "global_settings" => {
                    db_update.global_settings =
                        global_settings_table::parse_table_update(table_update)?
                }
                "player" => db_update.player = player_table::parse_table_update(table_update)?,
                "player_game_stats" => {
                    db_update.player_game_stats =
                        player_game_stats_table::parse_table_update(table_update)?
                }
                "player_stats" => {
                    db_update.player_stats = player_stats_table::parse_table_update(table_update)?
                }
                "player_tag" => {
                    db_update.player_tag = player_tag_table::parse_table_update(table_update)?
                }
                "quest" => db_update.quest = quest_table::parse_table_update(table_update)?,
                "wallet" => db_update.wallet = wallet_table::parse_table_update(table_update)?,

                unknown => __anyhow::bail!("Unknown table {unknown:?} in DatabaseUpdate"),
            }
        }
        Ok(db_update)
    }
}

impl __sdk::spacetime_module::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::spacetime_module::DbUpdate for DbUpdate {
    fn apply_to_client_cache(&self, cache: &mut __sdk::client_cache::ClientCache<RemoteModule>) {
        cache
            .apply_diff_to_table::<TArenaLeaderboard>("arena_leaderboard", &self.arena_leaderboard);
        cache.apply_diff_to_table::<TArenaPool>("arena_pool", &self.arena_pool);
        cache.apply_diff_to_table::<TDailyState>("daily_state", &self.daily_state);
        cache.apply_diff_to_table::<DailyUpdateTimer>(
            "daily_update_timer",
            &self.daily_update_timer,
        );
        cache.apply_diff_to_table::<GlobalData>("global_data", &self.global_data);
        cache.apply_diff_to_table::<GlobalSettings>("global_settings", &self.global_settings);
        cache.apply_diff_to_table::<TPlayer>("player", &self.player);
        cache.apply_diff_to_table::<TPlayerGameStats>("player_game_stats", &self.player_game_stats);
        cache.apply_diff_to_table::<TPlayerStats>("player_stats", &self.player_stats);
        cache.apply_diff_to_table::<TPlayerTag>("player_tag", &self.player_tag);
        cache.apply_diff_to_table::<TQuest>("quest", &self.quest);
        cache.apply_diff_to_table::<TWallet>("wallet", &self.wallet);
    }
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::callbacks::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<TArenaLeaderboard>(
            "arena_leaderboard",
            &self.arena_leaderboard,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TArenaPool>("arena_pool", &self.arena_pool, event);
        callbacks.invoke_table_row_callbacks::<TDailyState>(
            "daily_state",
            &self.daily_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<DailyUpdateTimer>(
            "daily_update_timer",
            &self.daily_update_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GlobalData>("global_data", &self.global_data, event);
        callbacks.invoke_table_row_callbacks::<GlobalSettings>(
            "global_settings",
            &self.global_settings,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TPlayer>("player", &self.player, event);
        callbacks.invoke_table_row_callbacks::<TPlayerGameStats>(
            "player_game_stats",
            &self.player_game_stats,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TPlayerStats>(
            "player_stats",
            &self.player_stats,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TPlayerTag>("player_tag", &self.player_tag, event);
        callbacks.invoke_table_row_callbacks::<TQuest>("quest", &self.quest, event);
        callbacks.invoke_table_row_callbacks::<TWallet>("wallet", &self.wallet, event);
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::spacetime_module::InModule for RemoteModule {
    type Module = Self;
}

impl __sdk::spacetime_module::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type SubscriptionHandle = SubscriptionHandle;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::db_connection::DbContextImpl<RemoteModule>,
}

impl __sdk::spacetime_module::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::db_connection::DbContextImpl<RemoteModule>,
}

impl __sdk::spacetime_module::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::db_connection::DbContextImpl<RemoteModule>,
}

impl __sdk::spacetime_module::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::db_connection::DbContextImpl<RemoteModule>,
}

impl __sdk::spacetime_module::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::db_context::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __anyhow::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::subscription::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::subscription::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn address(&self) -> __sdk::Address {
        self.imp.address()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::db_connection::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __anyhow::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __anyhow::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __anyhow::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __anyhow::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __anyhow::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::spacetime_module::DbConnection for DbConnection {
    fn new(imp: __sdk::db_connection::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A [`DbConnection`] augmented with an [`__sdk::Event`],
/// passed to various callbacks invoked by the SDK.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::event::Event<Reducer>,
    imp: __sdk::db_connection::DbContextImpl<RemoteModule>,
}

impl __sdk::spacetime_module::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::db_context::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> spacetimedb_sdk::anyhow::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::subscription::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::subscription::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn address(&self) -> __sdk::Address {
        self.imp.address()
    }
}

impl __sdk::spacetime_module::EventContext for EventContext {
    fn event(&self) -> &__sdk::event::Event<Reducer> {
        &self.event
    }
    fn new(
        imp: __sdk::db_connection::DbContextImpl<RemoteModule>,
        event: __sdk::event::Event<Reducer>,
    ) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
pub struct SubscriptionHandle {
    imp: __sdk::subscription::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::spacetime_module::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::spacetime_module::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::subscription::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::subscription::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::subscription::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}
