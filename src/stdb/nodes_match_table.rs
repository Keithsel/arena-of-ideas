// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::t_node_type::TNode;
use spacetimedb_sdk::__codegen::{
    self as __sdk, __lib, __sats, __ws,
    anyhow::{self as __anyhow, Context as _},
};

/// Table handle for the table `nodes_match`.
///
/// Obtain a handle from the [`NodesMatchTableAccess::nodes_match`] method on [`super::RemoteTables`],
/// like `ctx.db.nodes_match()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.nodes_match().on_insert(...)`.
pub struct NodesMatchTableHandle<'ctx> {
    imp: __sdk::TableHandle<TNode>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `nodes_match`.
///
/// Implemented for [`super::RemoteTables`].
pub trait NodesMatchTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`NodesMatchTableHandle`], which mediates access to the table `nodes_match`.
    fn nodes_match(&self) -> NodesMatchTableHandle<'_>;
}

impl NodesMatchTableAccess for super::RemoteTables {
    fn nodes_match(&self) -> NodesMatchTableHandle<'_> {
        NodesMatchTableHandle {
            imp: self.imp.get_table::<TNode>("nodes_match"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct NodesMatchInsertCallbackId(__sdk::CallbackId);
pub struct NodesMatchDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for NodesMatchTableHandle<'ctx> {
    type Row = TNode;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = TNode> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = NodesMatchInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> NodesMatchInsertCallbackId {
        NodesMatchInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: NodesMatchInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = NodesMatchDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> NodesMatchDeleteCallbackId {
        NodesMatchDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: NodesMatchDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<TNode>("nodes_match");
    _table.add_unique_constraint::<String>("key", |row| &row.key);
}
pub struct NodesMatchUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for NodesMatchTableHandle<'ctx> {
    type UpdateCallbackId = NodesMatchUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> NodesMatchUpdateCallbackId {
        NodesMatchUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: NodesMatchUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __anyhow::Result<__sdk::TableUpdate<TNode>> {
    __sdk::TableUpdate::parse_table_update_with_primary_key::<String>(raw_updates, |row: &TNode| {
        &row.key
    })
    .context("Failed to parse table update for table \"nodes_match\"")
}

/// Access to the `key` unique index on the table `nodes_match`,
/// which allows point queries on the field of the same name
/// via the [`NodesMatchKeyUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.nodes_match().key().find(...)`.
pub struct NodesMatchKeyUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<TNode, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> NodesMatchTableHandle<'ctx> {
    /// Get a handle on the `key` unique index on the table `nodes_match`.
    pub fn key(&self) -> NodesMatchKeyUnique<'ctx> {
        NodesMatchKeyUnique {
            imp: self.imp.get_unique_constraint::<String>("key"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> NodesMatchKeyUnique<'ctx> {
    /// Find the subscribed row whose `key` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<TNode> {
        self.imp.find(col_val)
    }
}
