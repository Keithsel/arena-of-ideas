// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct UnitBalanceVote {
    pub unit: String,
    pub vote: i32,
}

impl __sdk::spacetime_module::InModule for UnitBalanceVote {
    type Module = super::RemoteModule;
}

pub struct UnitBalanceVoteCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `unit_balance_vote`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait unit_balance_vote {
    /// Request that the remote module invoke the reducer `unit_balance_vote` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_unit_balance_vote`] callbacks.
    fn unit_balance_vote(&self, unit: String, vote: i32) -> __anyhow::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `unit_balance_vote`.
    ///
    /// The [`super::EventContext`] passed to the `callback`
    /// will always have [`__sdk::Event::Reducer`] as its `event`,
    /// but it may or may not have terminated successfully and been committed.
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::EventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UnitBalanceVoteCallbackId`] can be passed to [`Self::remove_on_unit_balance_vote`]
    /// to cancel the callback.
    fn on_unit_balance_vote(
        &self,
        callback: impl FnMut(&super::EventContext, &String, &i32) + Send + 'static,
    ) -> UnitBalanceVoteCallbackId;
    /// Cancel a callback previously registered by [`Self::on_unit_balance_vote`],
    /// causing it not to run in the future.
    fn remove_on_unit_balance_vote(&self, callback: UnitBalanceVoteCallbackId);
}

impl unit_balance_vote for super::RemoteReducers {
    fn unit_balance_vote(&self, unit: String, vote: i32) -> __anyhow::Result<()> {
        self.imp
            .call_reducer("unit_balance_vote", UnitBalanceVote { unit, vote })
    }
    fn on_unit_balance_vote(
        &self,
        mut callback: impl FnMut(&super::EventContext, &String, &i32) + Send + 'static,
    ) -> UnitBalanceVoteCallbackId {
        UnitBalanceVoteCallbackId(self.imp.on_reducer::<UnitBalanceVote>(
            "unit_balance_vote",
            Box::new(move |ctx: &super::EventContext, args: &UnitBalanceVote| {
                callback(ctx, &args.unit, &args.vote)
            }),
        ))
    }
    fn remove_on_unit_balance_vote(&self, callback: UnitBalanceVoteCallbackId) {
        self.imp
            .remove_on_reducer::<UnitBalanceVote>("unit_balance_vote", callback.0)
    }
}
