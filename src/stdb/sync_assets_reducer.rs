// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::global_settings_type::GlobalSettings;
use super::t_incubator_links_type::TIncubatorLinks;
use super::t_incubator_type::TIncubator;
use super::t_incubator_votes_type::TIncubatorVotes;
use super::t_node_type::TNode;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct SyncAssetsArgs {
    pub global_settings: GlobalSettings,
    pub core: Vec<TNode>,
    pub players: Vec<TNode>,
    pub incubator: Vec<TNode>,
    pub incubator_nodes: Vec<TIncubator>,
    pub incubator_links: Vec<TIncubatorLinks>,
    pub incubator_votes: Vec<TIncubatorVotes>,
}

impl From<SyncAssetsArgs> for super::Reducer {
    fn from(args: SyncAssetsArgs) -> Self {
        Self::SyncAssets {
            global_settings: args.global_settings,
            core: args.core,
            players: args.players,
            incubator: args.incubator,
            incubator_nodes: args.incubator_nodes,
            incubator_links: args.incubator_links,
            incubator_votes: args.incubator_votes,
        }
    }
}

impl __sdk::InModule for SyncAssetsArgs {
    type Module = super::RemoteModule;
}

pub struct SyncAssetsCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `sync_assets`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait sync_assets {
    /// Request that the remote module invoke the reducer `sync_assets` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_sync_assets`] callbacks.
    fn sync_assets(
        &self,
        global_settings: GlobalSettings,
        core: Vec<TNode>,
        players: Vec<TNode>,
        incubator: Vec<TNode>,
        incubator_nodes: Vec<TIncubator>,
        incubator_links: Vec<TIncubatorLinks>,
        incubator_votes: Vec<TIncubatorVotes>,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `sync_assets`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`SyncAssetsCallbackId`] can be passed to [`Self::remove_on_sync_assets`]
    /// to cancel the callback.
    fn on_sync_assets(
        &self,
        callback: impl FnMut(
                &super::ReducerEventContext,
                &GlobalSettings,
                &Vec<TNode>,
                &Vec<TNode>,
                &Vec<TNode>,
                &Vec<TIncubator>,
                &Vec<TIncubatorLinks>,
                &Vec<TIncubatorVotes>,
            ) + Send
            + 'static,
    ) -> SyncAssetsCallbackId;
    /// Cancel a callback previously registered by [`Self::on_sync_assets`],
    /// causing it not to run in the future.
    fn remove_on_sync_assets(&self, callback: SyncAssetsCallbackId);
}

impl sync_assets for super::RemoteReducers {
    fn sync_assets(
        &self,
        global_settings: GlobalSettings,
        core: Vec<TNode>,
        players: Vec<TNode>,
        incubator: Vec<TNode>,
        incubator_nodes: Vec<TIncubator>,
        incubator_links: Vec<TIncubatorLinks>,
        incubator_votes: Vec<TIncubatorVotes>,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "sync_assets",
            SyncAssetsArgs {
                global_settings,
                core,
                players,
                incubator,
                incubator_nodes,
                incubator_links,
                incubator_votes,
            },
        )
    }
    fn on_sync_assets(
        &self,
        mut callback: impl FnMut(
                &super::ReducerEventContext,
                &GlobalSettings,
                &Vec<TNode>,
                &Vec<TNode>,
                &Vec<TNode>,
                &Vec<TIncubator>,
                &Vec<TIncubatorLinks>,
                &Vec<TIncubatorVotes>,
            ) + Send
            + 'static,
    ) -> SyncAssetsCallbackId {
        SyncAssetsCallbackId(self.imp.on_reducer(
            "sync_assets",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::SyncAssets {
                                    global_settings,
                                    core,
                                    players,
                                    incubator,
                                    incubator_nodes,
                                    incubator_links,
                                    incubator_votes,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(
                    ctx,
                    global_settings,
                    core,
                    players,
                    incubator,
                    incubator_nodes,
                    incubator_links,
                    incubator_votes,
                )
            }),
        ))
    }
    fn remove_on_sync_assets(&self, callback: SyncAssetsCallbackId) {
        self.imp.remove_on_reducer("sync_assets", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `sync_assets`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_sync_assets {
    /// Set the call-reducer flags for the reducer `sync_assets` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn sync_assets(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_sync_assets for super::SetReducerFlags {
    fn sync_assets(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("sync_assets", flags);
    }
}
