// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

use super::global_settings_type::GlobalSettings;
use super::t_ability_type::TAbility;
use super::t_base_unit_type::TBaseUnit;
use super::t_house_type::THouse;
use super::t_status_type::TStatus;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct UploadAssets {
    pub global_settings: GlobalSettings,
    pub base_unit: Vec<TBaseUnit>,
    pub house: Vec<THouse>,
    pub ability: Vec<TAbility>,
    pub status: Vec<TStatus>,
}

impl __sdk::spacetime_module::InModule for UploadAssets {
    type Module = super::RemoteModule;
}

pub struct UploadAssetsCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `upload_assets`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait upload_assets {
    /// Request that the remote module invoke the reducer `upload_assets` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_upload_assets`] callbacks.
    fn upload_assets(
        &self,
        global_settings: GlobalSettings,
        base_unit: Vec<TBaseUnit>,
        house: Vec<THouse>,
        ability: Vec<TAbility>,
        status: Vec<TStatus>,
    ) -> __anyhow::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `upload_assets`.
    ///
    /// The [`super::EventContext`] passed to the `callback`
    /// will always have [`__sdk::Event::Reducer`] as its `event`,
    /// but it may or may not have terminated successfully and been committed.
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::EventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UploadAssetsCallbackId`] can be passed to [`Self::remove_on_upload_assets`]
    /// to cancel the callback.
    fn on_upload_assets(
        &self,
        callback: impl FnMut(
                &super::EventContext,
                &GlobalSettings,
                &Vec<TBaseUnit>,
                &Vec<THouse>,
                &Vec<TAbility>,
                &Vec<TStatus>,
            ) + Send
            + 'static,
    ) -> UploadAssetsCallbackId;
    /// Cancel a callback previously registered by [`Self::on_upload_assets`],
    /// causing it not to run in the future.
    fn remove_on_upload_assets(&self, callback: UploadAssetsCallbackId);
}

impl upload_assets for super::RemoteReducers {
    fn upload_assets(
        &self,
        global_settings: GlobalSettings,
        base_unit: Vec<TBaseUnit>,
        house: Vec<THouse>,
        ability: Vec<TAbility>,
        status: Vec<TStatus>,
    ) -> __anyhow::Result<()> {
        self.imp.call_reducer(
            "upload_assets",
            UploadAssets {
                global_settings,
                base_unit,
                house,
                ability,
                status,
            },
        )
    }
    fn on_upload_assets(
        &self,
        mut callback: impl FnMut(
                &super::EventContext,
                &GlobalSettings,
                &Vec<TBaseUnit>,
                &Vec<THouse>,
                &Vec<TAbility>,
                &Vec<TStatus>,
            ) + Send
            + 'static,
    ) -> UploadAssetsCallbackId {
        UploadAssetsCallbackId(self.imp.on_reducer::<UploadAssets>(
            "upload_assets",
            Box::new(move |ctx: &super::EventContext, args: &UploadAssets| {
                callback(
                    ctx,
                    &args.global_settings,
                    &args.base_unit,
                    &args.house,
                    &args.ability,
                    &args.status,
                )
            }),
        ))
    }
    fn remove_on_upload_assets(&self, callback: UploadAssetsCallbackId) {
        self.imp
            .remove_on_reducer::<UploadAssets>("upload_assets", callback.0)
    }
}
