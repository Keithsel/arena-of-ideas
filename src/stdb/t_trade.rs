// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused_imports)]
use super::item_bundle::ItemBundle;
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address, ScheduleAt,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TTrade {
    pub id: u64,
    pub a_player: u64,
    pub b_player: u64,
    pub a_offer: ItemBundle,
    pub b_offer: ItemBundle,
    pub a_accepted: bool,
    pub b_accepted: bool,
}

impl TableType for TTrade {
    const TABLE_NAME: &'static str = "TTrade";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for TTrade {
    type PrimaryKey = u64;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.id
    }
}

impl TTrade {
    #[allow(unused)]
    pub fn filter_by_id(id: u64) -> TableIter<Self> {
        Self::filter(|row| row.id == id)
    }
    #[allow(unused)]
    pub fn find_by_id(id: u64) -> Option<Self> {
        Self::find(|row| row.id == id)
    }
    #[allow(unused)]
    pub fn filter_by_a_player(a_player: u64) -> TableIter<Self> {
        Self::filter(|row| row.a_player == a_player)
    }
    #[allow(unused)]
    pub fn filter_by_b_player(b_player: u64) -> TableIter<Self> {
        Self::filter(|row| row.b_player == b_player)
    }
    #[allow(unused)]
    pub fn filter_by_a_accepted(a_accepted: bool) -> TableIter<Self> {
        Self::filter(|row| row.a_accepted == a_accepted)
    }
    #[allow(unused)]
    pub fn filter_by_b_accepted(b_accepted: bool) -> TableIter<Self> {
        Self::filter(|row| row.b_accepted == b_accepted)
    }
}
