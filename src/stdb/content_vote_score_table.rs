// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::t_content_vote_score_type::TContentVoteScore;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

/// Table handle for the table `content_vote_score`.
///
/// Obtain a handle from the [`ContentVoteScoreTableAccess::content_vote_score`] method on [`super::RemoteTables`],
/// like `ctx.db.content_vote_score()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.content_vote_score().on_insert(...)`.
pub struct ContentVoteScoreTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<TContentVoteScore>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `content_vote_score`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ContentVoteScoreTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`ContentVoteScoreTableHandle`], which mediates access to the table `content_vote_score`.
    fn content_vote_score(&self) -> ContentVoteScoreTableHandle<'_>;
}

impl ContentVoteScoreTableAccess for super::RemoteTables {
    fn content_vote_score(&self) -> ContentVoteScoreTableHandle<'_> {
        ContentVoteScoreTableHandle {
            imp: self
                .imp
                .get_table::<TContentVoteScore>("content_vote_score"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct ContentVoteScoreInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct ContentVoteScoreDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for ContentVoteScoreTableHandle<'ctx> {
    type Row = TContentVoteScore;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = TContentVoteScore> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = ContentVoteScoreInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ContentVoteScoreInsertCallbackId {
        ContentVoteScoreInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: ContentVoteScoreInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = ContentVoteScoreDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ContentVoteScoreDeleteCallbackId {
        ContentVoteScoreDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: ContentVoteScoreDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub struct ContentVoteScoreUpdateCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::TableWithPrimaryKey for ContentVoteScoreTableHandle<'ctx> {
    type UpdateCallbackId = ContentVoteScoreUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> ContentVoteScoreUpdateCallbackId {
        ContentVoteScoreUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: ContentVoteScoreUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<TContentVoteScore>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_with_primary_key::<String>(
        raw_updates,
        |row: &TContentVoteScore| &row.id,
    )
    .context("Failed to parse table update for table \"content_vote_score\"")
}

/// Access to the `id` unique index on the table `content_vote_score`,
/// which allows point queries on the field of the same name
/// via the [`ContentVoteScoreIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.content_vote_score().id().find(...)`.
pub struct ContentVoteScoreIdUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<TContentVoteScore, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> ContentVoteScoreTableHandle<'ctx> {
    /// Get a handle on the `id` unique index on the table `content_vote_score`.
    pub fn id(&self) -> ContentVoteScoreIdUnique<'ctx> {
        ContentVoteScoreIdUnique {
            imp: self
                .imp
                .get_unique_constraint::<String>("id", |row| &row.id),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> ContentVoteScoreIdUnique<'ctx> {
    /// Find the subscribed row whose `id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<TContentVoteScore> {
        self.imp.find(col_val)
    }
}
