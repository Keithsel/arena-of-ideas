// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::t_content_score_type::TContentScore;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

/// Table handle for the table `content_score`.
///
/// Obtain a handle from the [`ContentScoreTableAccess::content_score`] method on [`super::RemoteTables`],
/// like `ctx.db.content_score()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.content_score().on_insert(...)`.
pub struct ContentScoreTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<TContentScore>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `content_score`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ContentScoreTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`ContentScoreTableHandle`], which mediates access to the table `content_score`.
    fn content_score(&self) -> ContentScoreTableHandle<'_>;
}

impl ContentScoreTableAccess for super::RemoteTables {
    fn content_score(&self) -> ContentScoreTableHandle<'_> {
        ContentScoreTableHandle {
            imp: self.imp.get_table::<TContentScore>("content_score"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct ContentScoreInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct ContentScoreDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for ContentScoreTableHandle<'ctx> {
    type Row = TContentScore;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = TContentScore> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = ContentScoreInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ContentScoreInsertCallbackId {
        ContentScoreInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: ContentScoreInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = ContentScoreDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ContentScoreDeleteCallbackId {
        ContentScoreDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: ContentScoreDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub struct ContentScoreUpdateCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::TableWithPrimaryKey for ContentScoreTableHandle<'ctx> {
    type UpdateCallbackId = ContentScoreUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> ContentScoreUpdateCallbackId {
        ContentScoreUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: ContentScoreUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<TContentScore>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_with_primary_key::<String>(
        raw_updates,
        |row: &TContentScore| &row.id,
    )
    .context("Failed to parse table update for table \"content_score\"")
}

/// Access to the `id` unique index on the table `content_score`,
/// which allows point queries on the field of the same name
/// via the [`ContentScoreIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.content_score().id().find(...)`.
pub struct ContentScoreIdUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<TContentScore, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> ContentScoreTableHandle<'ctx> {
    /// Get a handle on the `id` unique index on the table `content_score`.
    pub fn id(&self) -> ContentScoreIdUnique<'ctx> {
        ContentScoreIdUnique {
            imp: self
                .imp
                .get_unique_constraint::<String>("id", |row| &row.id),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> ContentScoreIdUnique<'ctx> {
    /// Find the subscribed row whose `id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<TContentScore> {
        self.imp.find(col_val)
    }
}
