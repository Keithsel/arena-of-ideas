// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::item_bundle_type::ItemBundle;
use super::t_reward_type::TReward;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

/// Table handle for the table `reward`.
///
/// Obtain a handle from the [`RewardTableAccess::reward`] method on [`super::RemoteTables`],
/// like `ctx.db.reward()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.reward().on_insert(...)`.
pub struct RewardTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<TReward>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `reward`.
///
/// Implemented for [`super::RemoteTables`].
pub trait RewardTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`RewardTableHandle`], which mediates access to the table `reward`.
    fn reward(&self) -> RewardTableHandle<'_>;
}

impl RewardTableAccess for super::RemoteTables {
    fn reward(&self) -> RewardTableHandle<'_> {
        RewardTableHandle {
            imp: self.imp.get_table::<TReward>("reward"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct RewardInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct RewardDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for RewardTableHandle<'ctx> {
    type Row = TReward;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = TReward> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = RewardInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> RewardInsertCallbackId {
        RewardInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: RewardInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = RewardDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> RewardDeleteCallbackId {
        RewardDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: RewardDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub struct RewardUpdateCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::TableWithPrimaryKey for RewardTableHandle<'ctx> {
    type UpdateCallbackId = RewardUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> RewardUpdateCallbackId {
        RewardUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: RewardUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<TReward>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_with_primary_key::<u64>(
        raw_updates,
        |row: &TReward| &row.id,
    )
    .context("Failed to parse table update for table \"reward\"")
}

/// Access to the `id` unique index on the table `reward`,
/// which allows point queries on the field of the same name
/// via the [`RewardIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.reward().id().find(...)`.
pub struct RewardIdUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<TReward, u64>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> RewardTableHandle<'ctx> {
    /// Get a handle on the `id` unique index on the table `reward`.
    pub fn id(&self) -> RewardIdUnique<'ctx> {
        RewardIdUnique {
            imp: self.imp.get_unique_constraint::<u64>("id", |row| &row.id),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> RewardIdUnique<'ctx> {
    /// Find the subscribed row whose `id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u64) -> Option<TReward> {
        self.imp.find(col_val)
    }
}
