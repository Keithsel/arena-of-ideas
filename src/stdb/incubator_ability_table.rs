// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::t_incubator_ability_type::TIncubatorAbility;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

/// Table handle for the table `incubator_ability`.
///
/// Obtain a handle from the [`IncubatorAbilityTableAccess::incubator_ability`] method on [`super::RemoteTables`],
/// like `ctx.db.incubator_ability()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.incubator_ability().on_insert(...)`.
pub struct IncubatorAbilityTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<TIncubatorAbility>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `incubator_ability`.
///
/// Implemented for [`super::RemoteTables`].
pub trait IncubatorAbilityTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`IncubatorAbilityTableHandle`], which mediates access to the table `incubator_ability`.
    fn incubator_ability(&self) -> IncubatorAbilityTableHandle<'_>;
}

impl IncubatorAbilityTableAccess for super::RemoteTables {
    fn incubator_ability(&self) -> IncubatorAbilityTableHandle<'_> {
        IncubatorAbilityTableHandle {
            imp: self.imp.get_table::<TIncubatorAbility>("incubator_ability"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct IncubatorAbilityInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct IncubatorAbilityDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for IncubatorAbilityTableHandle<'ctx> {
    type Row = TIncubatorAbility;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = TIncubatorAbility> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = IncubatorAbilityInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> IncubatorAbilityInsertCallbackId {
        IncubatorAbilityInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: IncubatorAbilityInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = IncubatorAbilityDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> IncubatorAbilityDeleteCallbackId {
        IncubatorAbilityDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: IncubatorAbilityDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

pub struct IncubatorAbilityUpdateCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::TableWithPrimaryKey for IncubatorAbilityTableHandle<'ctx> {
    type UpdateCallbackId = IncubatorAbilityUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> IncubatorAbilityUpdateCallbackId {
        IncubatorAbilityUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: IncubatorAbilityUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<TIncubatorAbility>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_with_primary_key::<u64>(
        raw_updates,
        |row: &TIncubatorAbility| &row.id,
    )
    .context("Failed to parse table update for table \"incubator_ability\"")
}

/// Access to the `id` unique index on the table `incubator_ability`,
/// which allows point queries on the field of the same name
/// via the [`IncubatorAbilityIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.incubator_ability().id().find(...)`.
pub struct IncubatorAbilityIdUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<TIncubatorAbility, u64>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> IncubatorAbilityTableHandle<'ctx> {
    /// Get a handle on the `id` unique index on the table `incubator_ability`.
    pub fn id(&self) -> IncubatorAbilityIdUnique<'ctx> {
        IncubatorAbilityIdUnique {
            imp: self.imp.get_unique_constraint::<u64>("id", |row| &row.id),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> IncubatorAbilityIdUnique<'ctx> {
    /// Find the subscribed row whose `id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u64) -> Option<TIncubatorAbility> {
        self.imp.find(col_val)
    }
}
