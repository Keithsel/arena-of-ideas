// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

use super::game_data_type::GameData;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub struct UploadGameData {
    pub next_id: u64,
    pub data: GameData,
}

impl __sdk::spacetime_module::InModule for UploadGameData {
    type Module = super::RemoteModule;
}

pub struct UploadGameDataCallbackId(__sdk::callbacks::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `upload_game_data`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait upload_game_data {
    /// Request that the remote module invoke the reducer `upload_game_data` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_upload_game_data`] callbacks.
    fn upload_game_data(&self, next_id: u64, data: GameData) -> __anyhow::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `upload_game_data`.
    ///
    /// The [`super::EventContext`] passed to the `callback`
    /// will always have [`__sdk::Event::Reducer`] as its `event`,
    /// but it may or may not have terminated successfully and been committed.
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::EventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UploadGameDataCallbackId`] can be passed to [`Self::remove_on_upload_game_data`]
    /// to cancel the callback.
    fn on_upload_game_data(
        &self,
        callback: impl FnMut(&super::EventContext, &u64, &GameData) + Send + 'static,
    ) -> UploadGameDataCallbackId;
    /// Cancel a callback previously registered by [`Self::on_upload_game_data`],
    /// causing it not to run in the future.
    fn remove_on_upload_game_data(&self, callback: UploadGameDataCallbackId);
}

impl upload_game_data for super::RemoteReducers {
    fn upload_game_data(&self, next_id: u64, data: GameData) -> __anyhow::Result<()> {
        self.imp
            .call_reducer("upload_game_data", UploadGameData { next_id, data })
    }
    fn on_upload_game_data(
        &self,
        mut callback: impl FnMut(&super::EventContext, &u64, &GameData) + Send + 'static,
    ) -> UploadGameDataCallbackId {
        UploadGameDataCallbackId(self.imp.on_reducer::<UploadGameData>(
            "upload_game_data",
            Box::new(move |ctx: &super::EventContext, args: &UploadGameData| {
                callback(ctx, &args.next_id, &args.data)
            }),
        ))
    }
    fn remove_on_upload_game_data(&self, callback: UploadGameDataCallbackId) {
        self.imp
            .remove_on_reducer::<UploadGameData>("upload_game_data", callback.0)
    }
}
