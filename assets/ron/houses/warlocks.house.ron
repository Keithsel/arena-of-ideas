#![enable(implicit_some)]
(
    name: "Warlocks",
    color: ("#7B1FA2"),
    statuses: [
        (
            name: "Doom",
            description: "Die in {Charges} turns then summon Doomguard",
            trigger: Fire(
                triggers: [(TurnEnd, None)],
                effects: [
                    (
                        If(
                            Equals(StatusCharges(String("Doom")), Int(1)),
                            List(
                                [
                                    WithTarget(Owner, Kill),
                                    WithVar(
                                        Faction,
                                        StateLast(Faction, Parent(Context(Caster))),
                                        Summon("Doomguard", None),
                                    ),
                                ],
                            ),
                            Noop,
                        ),
                        None,
                    ),
                    (WithVar(Charges, Int(-1), WithTarget(Owner, AddStatus("Doom"))), None),
                ],
            ),
        ),
    ],
    abilities: [
        (
            name: "Doom",
            description: "Kill target in 5 turns then summon friendly [Doomguard]",
            effect: List(
                [
                    WithVar(Charges, Int(5), AddStatus("Doom")),
                    StateSetVar(Caster, StatusEntity("Doom", Target), Owner),
                ],
            ),
        ),
    ],
    summons: [
        (
            name: "Doomguard",
            hp: 10,
            pwr: 10,
            stacks: 1,
            houses: "Warlocks",
            representation: (
                material: Shape(
                    shape: Circle(
                        radius: Sum(
                            Float(0.9),
                            Mul(Abs(Sin(Mul(Sum(GameTime, Index), Float(29.2)))), Float(-0.6)),
                        ),
                    ),
                    shape_type: Line(thickness: Float(1.0)),
                    alpha: Float(1.0),
                ),
                children: [],
                mapping: {Offset: Mul(UnitVec(Mul(Sin(Sum(GameTime, Index)), Float(100.0))), Float(0.05))},
                count: 10,
            ),
        ),
    ],
)